/**
 *
 * {{properCase name }}
 *
 */

{{#if memo}}
import React, { memo } from 'react';
{{else}}
import React from 'react';
{{/if}}
import {Helmet} from "react-helmet";
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
{{#if wantActionsAndReducer}}
import { createStructuredSelector } from 'reselect';
{{/if}}
import { compose } from 'redux';

{{#if wantSaga}}
import injectSaga from '../../utils/injectSaga';
{{/if}}
{{#if wantActionsAndReducer}}
import injectReducer from '../../utils/injectSaga';
import makeSelect{{properCase name}} from './selectors';
import reducer from './reducer';
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}

export function {{ properCase name }}() {
  return (
    <div>
          <Helmet>
                <title>{{titleCase name}}</title>
                <meta name="description" content="Description of {{titleCase name}}" />
            </Helmet>
    </div>
  );
}

{{ properCase name }}.propTypes = {
  dispatch: PropTypes.func.isRequired,
};

{{#if wantActionsAndReducer}}
const mapStateToProps = createStructuredSelector({
  {{ camelCase name }}: makeSelect{{properCase name}}(),
});
{{/if}}

function mapDispatchToProps(dispatch) {
  return {
    dispatch,
  };
}

{{#if wantActionsAndReducer}}
const withConnect = connect(mapStateToProps, mapDispatchToProps);
{{else}}
const withConnect = connect(null, mapDispatchToProps);
{{/if}}

export default compose(
  {{#if wantActionsAndReducer}}
  injectReducer({ key: '{{ camelCase name }}', reducer }),
  {{/if}}
  {{#if wantSaga}}
  injectSaga({ key: '{{ camelCase name }}', saga }),
  {{/if}}
  withConnect,
{{#if memo}}
  memo,
{{/if}}
)({{ properCase name }});
